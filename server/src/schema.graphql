### This file was generated by Nexus Schema
### Do not make changes to this file directly


type ACH {
  account: String
  account_id: String
  routing: String
  wire_routing: String
}

type Account {
  account_id: String
  balances: Balances
  mask: String
  name: String
  numbers: AccountNumbers
  official_name: String
  subtype: AccountSubType
  type: AccountType
}

type AccountNumbers {
  ach: ACH
  eft: EFT
}

enum AccountSubType {
  CASH_DIRECTORY
  CHECKING
  CREDIT_CARD
  IRA
  MONEY_MARKET
  RETIREMENT
  SAVINGS
  STUDENT
}

enum AccountType {
  BROKERAGE
  CREDIT
  DEPOSITORY
  INVESTMENT
  LOAN
  MORTGAGE
  OTHER
}

type AccountsResponse {
  accounts: [Account]
  item: Item
}

type Balances {
  available: Float
  current: Float
  iso_currency_code: ISOCurrencyCode
  limit: Float
  unofficial_currency_code: String
}

type Category {
  category_id: Int
  group: String
  hierarchy: String
}

type CreateLinkTokenResponse {
  expiration: String
  link_token: String
  request_id: String
}

type EFT {
  account: String
  account_id: String
  branch: String
  institution: String
}

type ExchangePublicTokenResponse {
  access_token: String
  item_id: String
  request_id: String
  status_code: Int
}

type Expense {
  amount: String
  date: String
  interval: Int
  name: String
}

enum ISOCurrencyCode {
  CAD
  USD
}

type Income {
  amount: String
  date: String
  interval: Int
  name: String
}

type Institution {
  country_codes: [String]
  institution_id: String
  logo: String
  name: String
  oauth: Boolean
  primary_color: String
  products: [String]
  routing_numbers: [String]
  url: String
}

type InstitutionResponse {
  institution: Institution
}

type Item {
  available_products: [String]
  billed_products: [String]
  institution_id: String
  item_id: String
  webook: String
}

type ItemResponse {
  item: Item
  request_id: String
}

type Location {
  address: String
  city: String
  latitude: Float
  longitude: Float
  state: String
}

type Mutation {
  exchangePublicToken(public_token: String!): ExchangePublicTokenResponse
}

type PaymentMeta {
  payeeName: String
  ppdId: Int
  reference_number: Int
}

type PlaidError {
  display_message: String
  error_code: String
  error_message: String
  error_type: PlaidErrorType
  http_code: Int
  request_id: String
}

enum PlaidErrorType {
  API_ERROR
  ASSET_REPORT_ERROR
  INSTITUTION_ERROR
  INVALID_INPUT
  INVALID_REQUEST
  ITEM_ERROR
  RATE_LIMIT_EXCEEDED
}

type Query {
  getAccounts(access_token: String!, options: RequestOptionsInput): AccountsResponse
  getInstitutionById(institution_id: String!): InstitutionResponse
  getItem(access_token: String!): ItemResponse
  getLink(client_user_id: String!): CreateLinkTokenResponse
  getTransactions(access_token: String!, options: String): TransactionsResponse
}

input RequestOptionsInput {
  account_ids: [String]
}

type Transaction {
  account_id: String
  account_owner: String
  amount: Float
  category: Category
  category_id: String
  date: String
  location: Location
  name: String
  payment_meta: PaymentMeta
  pending: Boolean
  pending_transaction_id: String
  transaction_id: String
  transaction_type: TransactionType
}

enum TransactionType {
  DIGITAL
  PLACE
  SPECIAL
  UNRESOLVED
}

input TransactionsInput {
  end_date: String!
  options: TransactionsOptionsInput
  start_date: String!
}

input TransactionsOptionsInput {
  account_ids: [String]
  count: Int
  offset: Int
}

type TransactionsResponse {
  accounts: Account
  total_transactions: Int
  transactions: Transaction
}
